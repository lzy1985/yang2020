<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd">

    <import resource="classpath*:spring/applicationContext-dao.xml"/>

    <!-- 扫描com.study.yang及子包，自动实例化带@注释的实例，这里排除@Controller，所有Controller的实例化在springmvc-servlet中完成 -->
    <context:component-scan base-package="com.study.yang.*">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--<import resource="classpath:rabbitmq/spring-rabbitmq-producer.xml"/>-->
    <!--<import resource="classpath*:rabbitmq/spring-rabbitmq-consumer.xml"/>-->
    <!--
        配置事务的传播特性
        REQUIRED 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务
        SUPPORTS 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行
    -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" rollback-for="Exception"/>
            <tx:method name="add*" rollback-for="Exception"/>
            <tx:method name="insert*" rollback-for="Exception"/>
            <tx:method name="update*" rollback-for="Exception"/>
            <tx:method name="modify*" rollback-for="Exception"/>
            <tx:method name="delete*" rollback-for="Exception"/>
            <tx:method name="batch*" rollback-for="Exception"/>
            <tx:method name="cancel*" rollback-for="Exception"/>
            <tx:method name="commit*" rollback-for="Exception"/>

            <!-- snaker-->
            <tx:method name="start*" rollback-for="Exception"/>
            <tx:method name="execute*" rollback-for="Exception"/>
            <tx:method name="remove*" rollback-for="Exception"/>
            <tx:method name="assign*" rollback-for="Exception"/>
            <tx:method name="create*" rollback-for="Exception"/>
            <tx:method name="complete*" rollback-for="Exception"/>
            <tx:method name="finish*" rollback-for="Exception"/>
            <tx:method name="terminate*" rollback-for="Exception"/>
            <tx:method name="take*" rollback-for="Exception"/>
            <tx:method name="deploy*" rollback-for="Exception"/>
            <tx:method name="undeploy*" rollback-for="Exception"/>
            <tx:method name="redeploy*" rollback-for="Exception"/>

            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="is*" read-only="true" />
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置事务 切入点 -->
    <aop:config proxy-target-class="true">
    	<!-- 切入点 -->
    	<aop:pointcut id="txPointcut" expression="execution(* com.study.yang.*.service..*.*(..))
        or execution(* org.snaker.engine.core..*.*(..))" />
    	
    	<!-- 通知 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
        
        <!-- 通过AOP切面实现读/写库选择 -->  
    	<aop:aspect order="-2147483648" ref="dynamicDataSourceProcessor">
       		<aop:around pointcut-ref="txPointcut" method="determineReadOrWriteDB"/>  
    	</aop:aspect>
    </aop:config>

    <bean id="dynamicDataSourceProcessor" class="com.study.yang.base.datasource.DynamicDataSourceProcessor"/>


    <!-- snaker 配置-->
    <bean id="memoryCacheManager" class="org.snaker.engine.cache.memory.MemoryCacheManager"/>

    <bean id="dbAccess" class="org.snaker.engine.access.mybatis.MybatisAccess">
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <bean id="processService" class="org.snaker.engine.core.ProcessService">
        <property name="access" ref="dbAccess"/>
        <property name="cacheManager" ref="memoryCacheManager"/>
    </bean>

    <bean id="orderService" class="org.snaker.engine.core.OrderService">
        <property name="access" ref="dbAccess"/>
    </bean>

    <bean id="taskService" class="org.snaker.engine.core.TaskService">
        <property name="access" ref="dbAccess"/>
    </bean>

    <bean id="managerService" class="org.snaker.engine.core.ManagerService">
        <property name="access" ref="dbAccess"/>
    </bean>

    <bean id="queryService" class="org.snaker.engine.core.QueryService">
        <property name="access" ref="dbAccess"/>
    </bean>

    <bean id="springSnakerEngine" class="org.snaker.engine.spring.SpringSnakerEngine">
        <property name="processService" ref="processService"/>
        <property name="orderService" ref="orderService"/>
        <property name="taskService" ref="taskService"/>
        <property name="queryService" ref="queryService"/>
        <property name="managerService" ref="managerService"/>
    </bean>
</beans>